# -*- coding: utf-8 -*-
"""FBProphet_Bitcoin.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A_ea_nqjouP-UzOF1y2pD4-iP4thjYe2
"""

# Commented out IPython magic to ensure Python compatibility.
from fbprophet import Prophet
from fbprophet.plot import plot_plotly
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import plotly.offline as py
py.init_notebook_mode()
# %matplotlib inline

from google.colab import files
uploaded = files.upload()
import io
df = pd.read_csv(io.BytesIO(uploaded['prophet bitcoin.csv']),encoding = 'unicode escape')

df.head()

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df.iloc[:,6] = le.fit_transform(df.iloc[:,6])
df.head(2)

x= df[['Date','Open', 'High', 'Low', 'Volume', 'Label']]
y= df.iloc[:,4]

df = df.sort_values(by='Date',ascending = True)
df.head()

train_df= pd.DataFrame()
train_df['ds'] = pd.to_datetime(x["Date"])
train_df['y']=y
train_df.head(2)

prophet_basic = Prophet()
prophet_basic.fit(train_df)

future= prophet_basic.make_future_dataframe(periods=100)
future.tail(2)

forecast = prophet_basic.predict(future)

fig1 =prophet_basic.plot(forecast)

plot1 = prophet_basic.plot_components(forecast)

#Prophet adjusting trend to avoid over or underfitting

from fbprophet.plot import add_changepoints_to_plot

pro_change= Prophet(n_changepoints=20, yearly_seasonality=True, changepoint_prior_scale=0.08)
forecast = pro_change.fit(train_df).predict(future)
fig= pro_change.plot(forecast);
a = add_changepoints_to_plot(fig.gca(), pro_change, forecast)

#Adding regressors

train_df['Date'] = x['Date']
train_df['Open'] = x['Open']
train_df['High'] = x['High']
train_df['Low'] = x['Low']
train_df['Label'] = x['Label']
train_df['Volume'] = x['Volume']

train_x= train_df[:351]
test_x= train_df[352:]

#Additional Regressor
pro_regressor= Prophet()
pro_regressor.add_regressor('Open')
pro_regressor.add_regressor('High')
pro_regressor.add_regressor('Low')
pro_regressor.add_regressor('Volume')
pro_regressor.add_regressor('Label')

#Fitting the data
pro_regressor.fit(train_x)
future_data = pro_regressor.make_future_dataframe(periods=120)

#forecast the data for Test  data
forecast_data = pro_regressor.predict(test_x)
pro_regressor.plot(forecast_data);

